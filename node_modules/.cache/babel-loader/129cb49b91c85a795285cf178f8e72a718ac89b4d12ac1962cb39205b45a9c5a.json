{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { createRouter, createWebHistory } from 'vue-router';\nvar router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes: [{\n    path: '/',\n    name: 'home',\n    component: function component() {\n      return import('../views/HomeView.vue');\n    }\n  }, {\n    path: '/list',\n    name: 'list',\n    component: function component() {\n      return import('../views/ListView.vue');\n    },\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: '/groups',\n    name: 'groups',\n    component: function component() {\n      return import('../views/GroupsView.vue');\n    },\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: '/groupPage',\n    name: 'groupPage',\n    component: function component() {\n      return import('../views/GroupInfoView.vue');\n    },\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: '/birthdays',\n    name: 'birthdays',\n    component: function component() {\n      return import('../views/Birthdays.vue');\n    },\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: '/spreadsheet',\n    name: 'spreadsheet',\n    component: function component() {\n      return import('../views/Spreadsheet.vue');\n    },\n    meta: {\n      requiresAuth: true\n    }\n  }]\n});\n\n// const getCurrentUser = () => {\n//   return new Promise((resolve, reject) => {\n//     const removeListener = onAuthStateChanged(\n//       getAuth(),\n//       (user) => {\n//         removeListener();\n//         resolve(user);\n//       },\n//       reject\n//     )\n//   });\n// }\n\n// router.beforeEach(async (to) => {\n//   // routes with `meta: { requiresAuth: true }` will check for\n//   // the users, others won't\n//   if (to.meta.requiresAuth) {\n//     const currentUser = await getCurrentUser()\n//     // if the user is not logged in, redirect to the login page\n//     if (!currentUser) {\n//       return {\n//         path: '/signin',\n//         query: {\n//           // we keep the current path in the query so we can\n//           // redirect to it after login with\n//           // `router.push(route.query.redirect || '/')`\n//           redirect: to.fullPath,\n//         },\n//       }\n//     }\n//   }\n// })\n\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","router","history","process","env","BASE_URL","routes","path","name","component","meta","requiresAuth"],"sources":["/Users/shan/SER375/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: () => import('../views/HomeView.vue'),\n    },\n    {\n      path: '/list',\n      name: 'list',\n      component: () => import('../views/ListView.vue'),\n      meta: {\n        requiresAuth: true,\n      }\n    },\n    {\n      path: '/groups',\n      name: 'groups',\n      component: () => import('../views/GroupsView.vue'),\n      meta: {\n        requiresAuth: true,\n      }\n    },\n    {\n      path: '/groupPage',\n      name: 'groupPage',\n      component: () => import('../views/GroupInfoView.vue'),\n      meta: {\n        requiresAuth: true,\n      }\n    },\n    {\n      path: '/birthdays',\n      name: 'birthdays',\n      component: () => import('../views/Birthdays.vue'),\n      meta: {\n        requiresAuth: true,\n      }\n    },\n    {\n      path: '/spreadsheet',\n      name: 'spreadsheet',\n      component: () => import('../views/Spreadsheet.vue'),\n      meta: {\n        requiresAuth: true,\n      }\n    }\n  ]\n});\n\n// const getCurrentUser = () => {\n//   return new Promise((resolve, reject) => {\n//     const removeListener = onAuthStateChanged(\n//       getAuth(),\n//       (user) => {\n//         removeListener();\n//         resolve(user);\n//       },\n//       reject\n//     )\n//   });\n// }\n\n// router.beforeEach(async (to) => {\n//   // routes with `meta: { requiresAuth: true }` will check for\n//   // the users, others won't\n//   if (to.meta.requiresAuth) {\n//     const currentUser = await getCurrentUser()\n//     // if the user is not logged in, redirect to the login page\n//     if (!currentUser) {\n//       return {\n//         path: '/signin',\n//         query: {\n//           // we keep the current path in the query so we can\n//           // redirect to it after login with\n//           // `router.push(route.query.redirect || '/')`\n//           redirect: to.fullPath,\n//         },\n//       }\n//     }\n//   }\n// })\n\nexport default router\n"],"mappings":";;;AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAE3D,IAAMC,MAAM,GAAGF,YAAY,CAAC;EAC1BG,OAAO,EAAEF,gBAAgB,CAACG,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CC,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,GAAG;IACTC,IAAI,EAAE,MAAM;IACZC,SAAS,EAAE,SAAAA,UAAA;MAAA,OAAM,MAAM,CAAC,uBAAuB,CAAC;IAAA;EAClD,CAAC,EACD;IACEF,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,MAAM;IACZC,SAAS,EAAE,SAAAA,UAAA;MAAA,OAAM,MAAM,CAAC,uBAAuB,CAAC;IAAA;IAChDC,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC,EACD;IACEJ,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAE,SAAAA,UAAA;MAAA,OAAM,MAAM,CAAC,yBAAyB,CAAC;IAAA;IAClDC,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC,EACD;IACEJ,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,WAAW;IACjBC,SAAS,EAAE,SAAAA,UAAA;MAAA,OAAM,MAAM,CAAC,4BAA4B,CAAC;IAAA;IACrDC,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC,EACD;IACEJ,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,WAAW;IACjBC,SAAS,EAAE,SAAAA,UAAA;MAAA,OAAM,MAAM,CAAC,wBAAwB,CAAC;IAAA;IACjDC,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC,EACD;IACEJ,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,aAAa;IACnBC,SAAS,EAAE,SAAAA,UAAA;MAAA,OAAM,MAAM,CAAC,0BAA0B,CAAC;IAAA;IACnDC,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC;AAEL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeV,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}